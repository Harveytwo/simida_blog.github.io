{"meta":{"title":"思密达的 blog","subtitle":"nanqiang 记录点滴思密达","description":"养成码字记录的习惯哦~~","author":"Nanqiang Lin","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-07-25T15:31:02.000Z","updated":"2018-07-25T15:31:46.512Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"我是 about 页面哦哦哦~~思密达"},{"title":"","date":"2018-07-24T15:58:47.480Z","updated":"2018-07-24T15:58:47.480Z","comments":true,"path":"html/index.html","permalink":"http://yoursite.com/html/index.html","excerpt":"","text":"Document 啦啦啦 我是测试的了 但是我是首页噢噢噢噢"},{"title":"","date":"2018-07-24T15:50:59.184Z","updated":"2018-07-24T15:46:18.819Z","comments":true,"path":"html/test02.html","permalink":"http://yoursite.com/html/test02.html","excerpt":"","text":"Document 啦啦啦 我是测试的了"},{"title":"tags","date":"2018-07-25T15:28:11.000Z","updated":"2018-07-25T15:28:11.507Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"egret_loading_ui","slug":"egret-loading-ui","date":"2018-07-25T15:33:37.000Z","updated":"2018-07-25T16:07:23.324Z","comments":true,"path":"2018/07/25/egret-loading-ui/","link":"","permalink":"http://yoursite.com/2018/07/25/egret-loading-ui/","excerpt":"","text":"egret 自定义 loading目录创建项目自定义 loading ui 创建项目和项目结构使用 egretLauncher 创建项目（这里是 game 项目的学习，不怎么使用 eui 项目），项目名 aaa 一般中文名（做个称职的程序员，避免使用中文名）。 项目结构如下： 熟悉重要目录的作用， tsconfig.json 文件是 typescript 编译的配置 egretProperties.json 文件是 egret 项目的相关配置，如：引擎版本、发布为微信小游戏（wxgame）或 h5（web） 的配置、项目引用的模块（modules）配置等 index.html 文件是项目的 html 文件，可以更改游戏 canvas 的大小、canvas 的适配模式（小游戏不支持 showAll 可以改为 fixedWidth ）、canvas 的方向、游戏的帧数、是否开启 fps 和 log（左上角显示）等 libs 目录是我们项目需要用到的一些库，如：p2.js 物理引擎、dragonbones 库等 resource 目录是放置静态资源 src 目录是我们主要阵地，写代码一般都在这里写 自定义 loading uiegret 创建了项目，egret run 就可以运行项目。开始 src 目录下有 3 个文件（ LoadingUI.ts, Main.ts, Platform.ts ），Main.ts 是项目的主入口，LoadingUI.ts 是 loading ui 的页面，所以要自定义就在这里修改，Platform.ts 平台数据接口，这个没管过。更改 LoadingUI.ts12var a = 88;console.log(a) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119class LoadingUI extends egret.Sprite implements RES.PromiseTaskReporter &#123; public constructor() &#123; super(); this.createView(); &#125; private textField: egret.TextField; private uiContainer: egret.DisplayObjectContainer; private img_loadingBg: egret.Bitmap; private img_loading0: egret.Bitmap; private img_loading1: egret.Bitmap; private loadingBg = &quot;resource/assets/bg.jpg&quot;; //加载页面背景 private loading0 = &quot;resource/mySources/loadingCar.png&quot;; //进度条的条 private loading1 = &quot;resource/mySources/timenumBg.png&quot;; //进度条的 条背景 private w: number; private h: number; private r: number; private createView(): void &#123; this.textField = new egret.TextField(); // this.addChild(this.textField); this.textField.y = 300; this.textField.width = 480; this.textField.height = 100; this.textField.textAlign = &quot;center&quot;; this.w = egret.Capabilities.boundingClientWidth; //设备的宽 this.h = egret.Capabilities.boundingClientHeight; // 加载背景图片 var urlLoader: egret.URLLoader = new egret.URLLoader(); urlLoader.addEventListener(egret.Event.COMPLETE, this.onComplete, this); urlLoader.dataFormat = egret.URLLoaderDataFormat.TEXTURE; urlLoader.load(new egret.URLRequest(this.loadingBg)); // 加载进度条 var urlLoader: egret.URLLoader = new egret.URLLoader(); urlLoader.addEventListener(egret.Event.COMPLETE, this.onComplete, this); urlLoader.dataFormat = egret.URLLoaderDataFormat.TEXTURE; urlLoader.load(new egret.URLRequest(this.loading0)); // 加载进度条背景 var urlLoader: egret.URLLoader = new egret.URLLoader(); urlLoader.addEventListener(egret.Event.COMPLETE, this.onComplete, this); urlLoader.dataFormat = egret.URLLoaderDataFormat.TEXTURE; urlLoader.load(new egret.URLRequest(this.loading1)); this.img_loadingBg = new egret.Bitmap(); this.img_loading0 = new egret.Bitmap(); this.img_loading1 = new egret.Bitmap(); this.uiContainer = new egret.DisplayObjectContainer(); this.addChild(this.uiContainer); this.addChildAt(this.img_loadingBg, 0); this.addChild(this.img_loading0); this.addChild(this.img_loading1); this.addChild(this.textField); &#125;// 加载完图片进行操作，贴图到 canvas 上 private onComplete(e: egret.Event) &#123; var urlLoader: egret.URLLoader = &lt;egret.URLLoader&gt;e.target; var texture = urlLoader.data; if (urlLoader._request.url == this.loadingBg) &#123; this.img_loadingBg.texture = texture; var bgW = this.img_loadingBg.width; var bgH = this.img_loadingBg.height; console.log(bgW + &quot;背景宽&quot;); console.log(bgH + &quot;背景高&quot;); console.log(this.w + &quot;视口宽&quot;); console.log(this.h + &quot;视口高&quot;); if (this.w / 640 &lt; this.h / 1136) &#123; //W this.img_loadingBg.scaleX = 1; this.img_loadingBg.scaleY = this.stage.stageHeight / bgH; &#125; else &#123; //H this.img_loadingBg.scaleY = 1; this.img_loadingBg.scaleX = this.stage.stageWidth / bgW; &#125; &#125; else if (urlLoader._request.url == this.loading0) &#123; this.img_loading0.scale9Grid = new egret.Rectangle(5, 5, 10, 10); this.img_loading0.width = this.stage.stageWidth - 140; this.img_loading0.height = 50; this.img_loading0.texture = texture; this.img_loading0.anchorOffsetX = this.img_loading0.width * 0.5; this.img_loading0.anchorOffsetY = this.img_loading0.height * 0.5; this.img_loading0.x = this.stage.stageWidth / 2; this.img_loading0.y = this.stage.stageHeight - 100; &#125; else if (urlLoader._request.url == this.loading1) &#123; this.img_loading1.scale9Grid = new egret.Rectangle(5, 5, 10, 10); this.img_loading1.width = this.stage.stageWidth - 140; this.img_loading1.height = 50; this.img_loading1.texture = texture; this.img_loading1.anchorOffsetX = this.img_loading1.width * 0.5; this.img_loading1.anchorOffsetY = this.img_loading1.height * 0.5; this.img_loading1.x = this.stage.stageWidth / 2; this.img_loading1.y = this.stage.stageHeight - 100; console.log(this.stage.stageWidth + &quot;AAAA&quot; + this.img_loading1.width); &#125; &#125;// 没加载一个文件调用一次 onProgress public onProgress(current: number, total: number): void &#123; // this.textField.text = `阿西吧Loading...$&#123;current&#125;/$&#123;total&#125;`; //进度文字 this.textField.text = &quot;&quot; + Math.round((current / total) * 100) + &quot;%&quot;; //进度条宽度 if (this.img_loading1 != null) &#123; this.img_loading1.width = 400 * (current / total); &#125; &#125;&#125; 主要是在 createView 方法里面加载图片，然后把 texture 赋值给 Bitmap 就行，进度条的表示在 onProgress 中操作。 下一篇：游戏场景切换","categories":[{"name":"egret","slug":"egret","permalink":"http://yoursite.com/categories/egret/"}],"tags":[{"name":"egret","slug":"egret","permalink":"http://yoursite.com/tags/egret/"},{"name":"typescript","slug":"typescript","permalink":"http://yoursite.com/tags/typescript/"}]},{"title":"first","slug":"first","date":"2018-07-23T13:53:08.000Z","updated":"2018-07-24T16:01:38.359Z","comments":true,"path":"2018/07/23/first/","link":"","permalink":"http://yoursite.com/2018/07/23/first/","excerpt":"从事前端工作两年出了，还没怎么写过博客，很是惭愧啊~~所以感觉总是自己的技术进步不大呐！现在开始，使用 github 搞一个个人博客吧！用于记录日常点点… So let’s begin今天先写一些 typescript 的学习笔记","text":"从事前端工作两年出了，还没怎么写过博客，很是惭愧啊~~所以感觉总是自己的技术进步不大呐！现在开始，使用 github 搞一个个人博客吧！用于记录日常点点… So let’s begin今天先写一些 typescript 的学习笔记 后面是啦啦啦啦啦啦啦啦啦啦啦啦","categories":[{"name":"什么","slug":"什么","permalink":"http://yoursite.com/categories/什么/"},{"name":"纳尼","slug":"什么/纳尼","permalink":"http://yoursite.com/categories/什么/纳尼/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://yoursite.com/tags/typescript/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-23T13:43:21.214Z","updated":"2018-07-25T15:36:40.891Z","comments":true,"path":"2018/07/23/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}